class Graph:
	def __init__(self, V):
		self.V = V 
		self.adj = [[] for i in range(V)] 

	def addPair(self, v, w):
		v -= 1
		w -= 1
		self.adj[v].append(w) 
		self.adj[w].append(v) 

	def disjointSets(self):
		visited = [False] * self.V 
		all_sets = [] 

		def countAll(v, group):
			visited[v] = True
			group.append(v + 1) 
for neighbor in self.adj[v]:
				if not visited[neighbor]:
					countAll(neighbor, group)

		for i in range(self.V):
			if not visited[i]: 
				# Create a new group
				group = [] 
				# Find all vertices connected to this one
				countAll(i, group) 
				all_sets.append(group) 

		return all_sets
Str = 'zcxfbe'
N = 6
Pairs = [[0, 1], [0, 2], [3, 5]] 

g = Graph(N) 
for i in Pairs:
	g.addPair(i[0], i[1])
groups = g.disjointSets()

key = [] # List to store indices of characters
value = [] # List to store characters

for i in range(len(groups)):
	semians = [] 
	for j in groups[i]:
		semians.append(Str[j]) 
	semians.sort()
	groups[i].sort() 
	
	value.extend(semians) 
	key.extend(groups[i]) 

ans = [""] * N 

for i in range(N):
	ans[key[i]] = value[i]

print(''.join(ans))

